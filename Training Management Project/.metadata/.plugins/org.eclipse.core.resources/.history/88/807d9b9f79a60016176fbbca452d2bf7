package com.project.springmvc.controller;

import java.util.ArrayList;
import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import com.project.springmvc.model.Admin;
import com.project.springmvc.model.AdminPojo;
import com.project.springmvc.model.Status;
import com.project.springmvc.service.AdminService;

@RestController
public class AdminController {
	

		@Autowired
		AdminService adminServices;

	
		@RequestMapping(value = "/user/", method = RequestMethod.GET)
		public ResponseEntity<List<Admin>> userSecurity() throws Exception {
			List<Admin> adminList = null;
		
				adminList = adminServices.findAllAdmins();

			
	       return new ResponseEntity<List<Admin>>(adminList, HttpStatus.OK);
		}
	
		@RequestMapping(value = "/create/", method = RequestMethod.POST)
		public ResponseEntity<Void> createRequirement(@RequestBody AdminPojo admin, UriComponentsBuilder ucBuilder) {
			System.out.println(" in Creating requirement " + AdminPojo);

			
			HttpHeaders headers = new HttpHeaders();
			return new ResponseEntity<Void>(headers, HttpStatus.CREATED);
		}
		
		@RequestMapping(value = "/create", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
		public @ResponseBody
		Status addAdmin(@RequestBody Admin admin) {
			try {
				adminServices.addAdmin(admin);;
				return new Status(1, "Admin added Successfully !");
			} catch (Exception e) {
				// e.printStackTrace();
				return new Status(0, e.toString());
			}

		}

		@RequestMapping(value = "/{adminid}", method = RequestMethod.GET,headers = "Accept=application/json")
		public @ResponseBody
		Admin getEmployee(@PathVariable("adminid") Integer id) {
			Admin admin = null;
			try {
				admin = adminServices.getAdminById(id);

			} catch (Exception e) {
				e.printStackTrace();
			}
			return admin;
		}

		@RequestMapping(value = "/list", method = RequestMethod.GET)
		public @ResponseBody
		List<Admin> getEmployee() {

			List<Admin> adminList = null;
			try {
				adminList = adminServices.findAllAdmins();

			} catch (Exception e) {
				e.printStackTrace();
			}

			return adminList;
		}

		@RequestMapping(value = "delete/{adminid}", method = RequestMethod.GET)
		public @ResponseBody
		Status deleteAdmin(@PathVariable("adminid") Integer id) {

			try {
				adminServices.deleteAdmin(id);;
				return new Status(1, "Employee deleted Successfully !");
			} catch (Exception e) {
				return new Status(0, e.toString());
			}

		}
	}

	




/*	@Autowired
	AdminService adminService;
	
	@Autowired
	MessageSource msgSource;
	
	@RequestMapping(value = {"/","/list"},method = RequestMethod.GET )
	public String listAdmins(ModelMap model) throws Exception {
		List<Admin> admin = adminService.findAllAdmins();
		model.addAttribute("admin",admin);
		return "allAdmin";
	}
	
	@RequestMapping(value = { "/new" }, method = RequestMethod.GET)
    public String newAdmin(ModelMap model) {
        Admin admin = new Admin();
        model.addAttribute("admin",admin);
        model.addAttribute("edit", false);
        return "registration";
    }
 
    @RequestMapping(value = { "/new" }, method = RequestMethod.POST)
    public String saveAdmin(@Valid Admin admin, BindingResult result,
            ModelMap model) throws Exception {
 
        if (result.hasErrors()) {
            return "registration";
        }
 
        
        adminService.addAdmin(admin);
 
        model.addAttribute("success", "Admin " + admin.getAdminName() + " registered successfully");
        return "success";
    }
 
}*/
