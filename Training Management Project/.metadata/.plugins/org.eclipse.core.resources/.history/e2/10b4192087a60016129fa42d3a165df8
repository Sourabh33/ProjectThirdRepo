package com.project.springmvc.controller;

import java.util.List;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.util.UriComponentsBuilder;

import com.project.springmvc.model.Admin;
import com.project.springmvc.model.AdminPojo;
import com.project.springmvc.model.Status;
import com.project.springmvc.service.AdminService;

@RestController
public class AdminController {
	

		@Autowired
		AdminService adminServices;

	
		@RequestMapping(value = "/admin/list/", method = RequestMethod.GET)
		public ResponseEntity<List<Admin>> getAdminList() throws Exception {
			List<Admin> adminList = null;
		
				adminList = adminServices.findAllAdmins();
			
	       return new ResponseEntity<List<Admin>>(adminList, HttpStatus.OK);
		}
	
		@RequestMapping(value = "/admin/create/", method = RequestMethod.POST)
		public ResponseEntity<Void> addAdmin(@RequestBody AdminPojo admin, UriComponentsBuilder ucBuilder) {
			System.out.println(" in Creating requirement " + admin);
			Admin ad = new Admin();
			ad.setAdminEmailId(admin.getAdminEmailId());
			ad.setAdminName(admin.getAdminName());
			ad.setAdminPassword(admin.getAdminPassword());
			try {
				adminServices.addAdmin(ad);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			HttpHeaders headers = new HttpHeaders();
			return new ResponseEntity<Void>(headers, HttpStatus.CREATED);
		}
		
		 @RequestMapping(value = "/admin/update/", method = RequestMethod.PUT)
			public ResponseEntity<Void> updateAdmin(@RequestBody AdminPojo admin, UriComponentsBuilder ucBuilder) {
				System.out.println(" in updateRequirement " + admin);
				Admin ad = new Admin();
				ad.setAdminEmailId(admin.getAdminEmailId());
				ad.setAdminName(admin.getAdminName());
				ad.setAdminPassword(admin.getAdminPassword());
				try {
					adminServices.updateAdmin(ad);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				
				HttpHeaders headers = new HttpHeaders();
				return new ResponseEntity<Void>(headers, HttpStatus.OK);
			}

		 @RequestMapping(value = "/admin/detail", method = RequestMethod.POST)
			public ResponseEntity<Admin> getAdmin(@RequestBody Integer id) throws Exception {
				
			 Admin admin = null;
			 try {
					admin = adminServices.getAdminById(id);

				} catch (Exception e) {
					e.printStackTrace();
				}
				
		       return new ResponseEntity<Admin>(admin, HttpStatus.FOUND);
			}
		
		 @RequestMapping(value = "/admin/delete/", method = RequestMethod.POST)
			public ResponseEntity<Void> deleteRequirement(@RequestBody int id, UriComponentsBuilder ucBuilder) {
			 try {
					adminServices.deleteAdmin(id);;
					
				} catch (Exception e) {
					
				}
				HttpHeaders headers = new HttpHeaders();
				return new ResponseEntity<Void>(headers, HttpStatus.CREATED);
			}
		

	}

	




/*	@Autowired
	AdminService adminService;
	
	@Autowired
	MessageSource msgSource;
	
	@RequestMapping(value = {"/","/list"},method = RequestMethod.GET )
	public String listAdmins(ModelMap model) throws Exception {
		List<Admin> admin = adminService.findAllAdmins();
		model.addAttribute("admin",admin);
		return "allAdmin";
	}
	
	@RequestMapping(value = { "/new" }, method = RequestMethod.GET)
    public String newAdmin(ModelMap model) {
        Admin admin = new Admin();
        model.addAttribute("admin",admin);
        model.addAttribute("edit", false);
        return "registration";
    }
 
    @RequestMapping(value = { "/new" }, method = RequestMethod.POST)
    public String saveAdmin(@Valid Admin admin, BindingResult result,
            ModelMap model) throws Exception {
 
        if (result.hasErrors()) {
            return "registration";
        }
 
        
        adminService.addAdmin(admin);
 
        model.addAttribute("success", "Admin " + admin.getAdminName() + " registered successfully");
        return "success";
    }
 
}*/
